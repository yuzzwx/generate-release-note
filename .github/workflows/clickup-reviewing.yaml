on:
  pull_request:
    types: [ opened, synchronize, edited, labeled ]
  issue_comment:
    types: [ created, edited ]

env:
  PR_NUM: ${{ github.event.pull_request.number || github.event.issue.number }}
  TARGET_STATUS: 'ON-HOLD' # For demo
  CLICKUP_TOKEN: ${{ secrets.CLICKUP_TOKEN }}

jobs:
  check-criteria:
    runs-on: ubuntu-latest
    outputs:
      IS_CRITERIA_MET: ${{ steps.check-criteria.outputs.IS_CRITERIA_MET }}
    steps:
      # not a draft
      # target branch is dev
      # has label 'will-release'
      - name: Check criteria
        id: check-criteria
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo ::set-output name=IS_CRITERIA_MET::true

          if [ ${{ github.event.issue.draft }} == true ]; then
            echo ::set-output name=IS_CRITERIA_MET::false
            echo 'Draft PR'
          fi

          BASE_REF=$(gh api repos/${{ github.repository }}/pulls/${{ env.PR_NUM }} | jq -r '.base.ref')
          if [ $BASE_REF != 'dev' ]; then
            echo ::set-output name=IS_CRITERIA_MET::false
            echo 'Not targeting dev'
          fi

          LABELS=$(gh api repos/${{ github.repository }}/pulls/${{ env.PR_NUM }} | jq -r '.labels[].name')
          if [[ ! $LABELS =~ 'will-release' ]]; then
            echo ::set-output name=IS_CRITERIA_MET::false
            echo 'Not labeled with will-release'
          fi

  clickup-reviewing:
    needs: check-criteria
    if: ${{ needs.check-criteria.outputs.IS_CRITERIA_MET == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4

      - name: Parse task id from branch name
        if: github.event_name == 'pull_request'
        id: task-id-from-branch
        run: |
          BRANCH_NAME=${{ github.event.pull_request.head.ref }}
          TASK_ID=$(python script/parse_task_id.py $BRANCH_NAME)
          
          echo ::set-output name=TASK_ID::$TASK_ID

      - name: Parse task id from comment
        id: task-id-from-comment
        if: ${{ startsWith(github.event.comment.body, '/link') }}
        run: |
          TASK_IDS_IN_RAW=$(echo ${{ github.event.comment.body }} | sed 's/\/link //g')
          TASK_IDS=$(python script/parse_task_id.py $TASK_IDS_IN_RAW)
          
          echo ::set-output name=TASK_IDS::$TASK_IDS

      - name: React comment as seen
        if: ${{ steps.task-id-from-comment.outputs.TASK_IDS != '' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ github.event.comment.id }}
          reactions: eyes

      - name: Update task status
        id: update-task-status
        run: |
          TASK_ID_FROM_BRANCH="${{ steps.task-id-from-branch.outputs.TASK_ID }}"
          TASK_IDS_FROM_COMMENT="${{ steps.task-id-from-comment.outputs.TASK_IDS }}"
          UPDATED_TASK_IDS=$(python script/update_task_status.py $TARGET_STATUS $TASK_ID_FROM_BRANCH $TASK_IDS_FROM_COMMENT)
          
          echo ::set-output name=UPDATED_TASK_IDS::$UPDATED_TASK_IDS

      - name: Find previous comment
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ env.PR_NUM }}
          comment-author: 'github-actions[bot]'

      - name: Compose comment
        id: create-comment
        run: |
          RESULT=$(python script/list_tasks_in_md.py ${{ steps.update-task-status.outputs.UPDATED_TASK_IDS }})
          echo ::set-output name=RESULT::$RESULT
        continue-on-error: true

      - name: Create comment
        if: ${{ steps.find-comment.outputs.comment-id == '' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ env.PR_NUM }}
          body: |
            Linked tasks:
            ${{ steps.create-comment.outputs.RESULT }}

      - name: Update comment
        if: ${{ steps.find-comment.outputs.comment-id != '' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          body: |
            ${{ steps.create-comment.outputs.RESULT }}
